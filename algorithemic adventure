# CSI 5610 - Algorithmic Adventure
#

from os import system
from typing import Counter
import random
import collections
from collections import Counter

class AlgorithmicAdventure:
    
    totalPoints = 0
    lvl2tries = 0
    lvl1tries = 0

    def canDistribute(nums, quantity):
        # Determine the frequency of each unique value
        freq = collections.Counter(nums)
        # get the list of frequencies
        counts = list(freq.values())
        # Frequencies in descending order
        counts.sort(reverse=True)

        # recursive function to check if we can satisfy all customers
        def backtrack(quantity, counts, index):
            # base case: all customers have been satisfied
            if index == len(quantity):
                return True
            for i in range(len(counts)):
                # check if we have enough of this value to satisfy the customer
                if counts[i] >= quantity[index]:
                    # reduce the count of this value
                    counts[i] -= quantity[index]
                    # recursively try to satisfy the next customer
                    if backtrack(quantity, counts, index + 1):
                        return True
                    # backtrack: restore the count of this value
                    counts[i] += quantity[index]
            return False

        # start backtracking from the first customer
        return backtrack(quantity, counts, 0)

    def l5Messaging(nTry):
        if nTry == 1:
            print("|   Welcome to level 5   |")
            print("|   In this level, you must solve a logistics puzzle to unlock the door to Level 6.   |")
            print(
                "|   Given a set of integers, you must determine if it is possible to distribute them to a group of customers based on their order quantities.   |")
            print("")
            print(nTry, "of 2 Try, good Luck!!")
            return
        elif nTry == 2:
            print("You have one more chance to advance to the next level")
        else:
            print(
                "You have exceeded the number of tries, you cannot continue to the next level and your journey terminates here!")
            exit(0)

    def l5Exe(num, quant):
        global nTry
        l5Rewards = 50

        if (nTry == 2):
            print("Would you like to try again?")
            uNext = input("Enter Y/N: ")
            uNext = uNext.upper()
            if uNext == "N":
                print("Hope you try the game at a later time!")
                exit()
        print("Can the numbers ", num, " meet customer orders ", quant, " ?")

        cRes = AlgorithmicAdventure.canDistribute(num, quant)
        # print("System Response", cRes)
        uResponse = input("Enter T/F: ")
        uRes = uResponse.upper()

        #print(uRes)
        uResp = None
        if uRes == "T":
            uResp = True
        elif uRes == "F":
            uResp = False
        else:
            print("User entered incorrect response")
            AlgorithmicAdventure.l5Exe(num, quant)
        if (cRes == uResp):
            print("Great Job! You have solved the puzzle and will move to Level 6. You earned the Famed Hero title.")
            if nTry == 1:
                AlgorithmicAdventure.totalPoints += l5Rewards
            elif nTry == 2:
                l5Rewards = l5Rewards - 10
                AlgorithmicAdventure.totalPoints += l5Rewards
            print("You earned",l5Rewards,"points in this level.")
            print("Total points earned so far: ", AlgorithmicAdventure.totalPoints)
            print("Would you like to continue to Level 6?")
            uNext = input("Enter Y/N: ")
            uNext = uNext.upper()
            if uNext == "N":
                print("Hope you try the game at a later time!")
                exit()
            AlgorithmicAdventure.Level6()

        else:
            print("In your", nTry, " try, your response is incorrect")
            nTry = nTry + 1
        return ()

    def MainMenu():
        #global gPoints
        gPoints = 0
        # each level we can add upto 50 Points
        system("cls")
        print("Algorithmic Adventure")
        print("1. Start Game")
        print("2. How To Play")
        print("3. Exit\n")

        ch = int(input("Please select an option: [1/2/3] \n"))
        if ch == 1:
            system("cls")
            AlgorithmicAdventure.Level1()
        elif ch == 2:
            system("cls")
            AlgorithmicAdventure.HowToPlay()
            x = input("Do you want to go back to the main menu? (Y/N): ")
            x = x.upper()
            if x == "Y":
                AlgorithmicAdventure.MainMenu()
            elif x == "N":
                print("\nHope you try the game at a later time!")
                exit(0)
        elif ch == 3:
            system("cls")
            print("You gave up on your quest to achieve fame and glory.")
            exit(0)
        else:
            print("Invalid Option!")
            press = input("Press any key to continue...")
            AlgorithmicAdventure.MainMenu()
            
    def HowToPlay():
        
        print("Welcome to Algorithmic Adventure.")
        print("\nYou play as the Hero who is on a quest to find hidden treasure inside a mysterious castle.")
        print("You need to complete 8 different levels before you can reach the treasure room.")
        print("You will need to solve various puzzles to progress through each level.")
        print("Once you complete a level, you attain a new rank.")
        print("If you fail to complete a level, it's game over, your progress will be reset and you will need to start over at the same level.")
        print("\nGood luck on your quest, Hero.\n")
        
    def oddEvenJumps(arr):
        n = len(arr)
        odd = [False] * n
        even = [False] * n
        odd[n-1] = even[n-1] = True
        indices = sorted(range(n), key=lambda i: arr[i]) 
        oddNext = AlgorithmicAdventure.makeNext(indices) 
        indices.sort(key=lambda i: -arr[i])
        evenNext = AlgorithmicAdventure.makeNext(indices)
        for i in range(n-2, -1, -1):
            if oddNext[i] is not None: 
                odd[i] = even[oddNext[i]]
            if evenNext[i] is not None:
                even[i] = odd[evenNext[i]]
            return sum(odd)
                
    def makeNext(indices):
        n = len(indices) 
        result = [None] * n 
        stack = []
        for i in indices:
            while stack and i > stack[-1]:
                result[stack.pop()] = i 
                stack.append(i)
        return result
            
    def Level1():
        
        system("cls")
        lvl1pts = 50
        """Displays Level 1: Odd-Even Jump"""
        print("{:>60}".format("****************************"))
        print("{:>57}".format("Level 1: Odd-Even Jump"))
        print("{:>60}".format("****************************"))
        print("You encounter a maze with floor tiles. Some of the tiles are safe but some of them are traps. Tread carefully!")
        print("The floor tiles are numbered with values like so:")
        # generate the table here
        table = [[2, 10, 3], [4, 8, 14], [5, 7, 17]]
        for row in table:
            print(*row)
        print("As an array, this looks like: [5,7,17,4,8,14,2,10,3]")
        print("You need to enter the correct starting tile that will allow you to safely reach the end of the maze.")
        correct_tile = AlgorithmicAdventure.oddEvenJumps(list(map(int, "5 7 17 4 8 14 2 10 3".split())))
        
        for i in range(3):
            user_input = input("Enter the correct tile number: ")
            
            if int(user_input) == correct_tile:
                print("Good job. You cleared Level 1.")
                print("You earned " + str(lvl1pts) + " points in this level.")
                AlgorithmicAdventure.totalPoints += lvl1pts
                print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                print("Would you like to continue to Level 2?")
                while (True):
                    uNext = input("Enter Y/N: ")
                    uNext = uNext.upper()
                    if uNext == "Y":
                        print("You proceed to Level 2. You earned the Newbie Hero title.")
                        AlgorithmicAdventure.Level2()
                    elif uNext == "N":
                        print("Hope you try the game at a later time!")
                        exit(0)
                    else:
                        print("Invalid input.")
            else:
                AlgorithmicAdventure.lvl1tries += 1
                if AlgorithmicAdventure.lvl1tries == 3:
                    print("You fail to unlock the door and activate some traps.")
                    print("Game Over")
                    print("You earned " + str(lvl1pts) + " points in this level.")
                    AlgorithmicAdventure.totalPoints += lvl1pts
                    print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                    y = input("Do you wish to try again? (Y/N): ")
                    y = y.upper()
                    if y == "Y":
                        AlgorithmicAdventure.totalPoints -= lvl1pts
                        AlgorithmicAdventure.Level1()
                    elif y == "N":
                        print("Hope you try the game at a later time!")
                        exit(0)
                    else:
                        print("Invalid input.")
                lvl1pts -= 10
                print("Your answer is incorrect. Try again.")
                    
    def countGoodStrings(n: int, s1: str, s2: str, evil: str) -> int:
        mod = 10**9 + 7

        m = len(evil)
        dp = [[[[-1] * (m + 1) for _ in range(2)] for _ in range(n + 1)] for _ in range(27)]

        def dfs(pos: int, prefix_match: int, lower_bound: bool, upper_bound: bool) -> int:
            if prefix_match == m:
                return 0
            if pos == n:
                return 1
            if dp[prefix_match][pos][prefix_match][int(lower_bound)] != -1 and not upper_bound:
                return dp[prefix_match][pos][prefix_match][int(lower_bound)]

            lb = ord(s1[pos]) if lower_bound else ord('a')
            ub = ord(s2[pos]) if upper_bound else ord('z')

            ans = 0
            for ch in range(lb, ub + 1):
                new_prefix_match = prefix_match
                while new_prefix_match >= 0 and evil[new_prefix_match] != chr(ch):
                    new_prefix_match = new_prefix_match - 1
                new_prefix_match += 1

                ans += dfs(pos + 1, new_prefix_match, lower_bound and ch == lb, upper_bound and ch == ub)
                ans %= mod

            if not upper_bound:
                dp[prefix_match][pos][prefix_match][int(lower_bound)] = ans

            return ans

        return dfs(0, 0, True, True)
                    
    def get_good_strings(lvl2pts):
        n = 2
        s1 = "aa"
        s2 = "da"
        evil = "b"
        print(f"Given the length of the string (n = {n}), strings s1 = {s1} and s2 = {s2}, and the string evil = {evil}, figure out the number of good strings to unlock the door that leads to the next level.")
        print(f"Hint: A good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring.")
        
        for i in range(3):
            x = int(input("Enter the number of good strings: "))
            
            try:
                user_ans = int(x)
            except ValueError:
                print("Invalid input.")
            
            good_strings = AlgorithmicAdventure.countGoodStrings(n, s1, s2, evil)
            
            if user_ans == good_strings:
                print("Good job. You cleared Level 2.")
                print("You earned " + str(lvl2pts) + " points in this level.")
                AlgorithmicAdventure.totalPoints += lvl2pts
                print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                print("Would you like to continue to Level 3?")
                while (True):
                    uNext = input("Enter Y/N: ")
                    uNext = uNext.upper()
                    if uNext == "Y":
                        print("You proceed to Level 3. You earned the Rogue Hero title.")
                        AlgorithmicAdventure.Level3()
                    elif uNext == "N":
                        print("Hope you try the game at a later time!")
                        exit(0)
                    else:
                        print("Invalid input.")
            else:
                AlgorithmicAdventure.lvl2tries += 1
                if AlgorithmicAdventure.lvl2tries == 3:
                    print("You fail to unlock the door and activate some traps.")
                    print("Game Over")
                    print("You earned " + str(lvl2pts) + " points in this level.")
                    AlgorithmicAdventure.totalPoints += lvl2pts
                    print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                    y = input("Do you wish to try again? (Y/N): ")
                    y = y.upper()
                    if y == "Y":
                        AlgorithmicAdventure.totalPoints -= lvl2pts
                        AlgorithmicAdventure.Level2()
                    elif y == "N":
                        print("Hope you try the game at a later time!")
                        exit(0)
                    else:
                        print("Invalid input.")
                lvl2pts -= 10
                print("Sorry, you didn't enter the correct answer. Try again.")
    
    def Level2():
        
        system("cls")
        lvl2pts = 50
        print("{:>60}".format("****************************"))
        print("{:>57}".format("Level 2: Good Strings"))
        print("{:>60}".format("****************************"))
        AlgorithmicAdventure.get_good_strings(lvl2pts)        
        
    def Level3():
        
        system("cls")
        lvl3pts = 50
        print("{:>60}".format("*****************************************"))
        print("{:>57}".format("Level 3: Kth Smallest Instructions"))
        print("{:>60}".format("*****************************************"))
        # Define the maze as a dictionary of room connections
        maze = {
            "living room": ["dining room", "kitchen"],
            "dining room": ["living room", "hallway"],
            "kitchen": ["living room", "pantry"],
            "pantry": ["kitchen"],
            "hallway": ["dining room", "bedroom", "bathroom"],
            "bedroom": ["hallway", "closet"],
            "closet": ["bedroom"],
            "bathroom": ["hallway"]
        }

        # Define the set of instructions as a list of room names
        instructions = ["kitchen", "pantry", "living room", "dining room", "hallway", "bedroom", "closet", "bathroom"]

        # Define the value of k
        k = 5

        # Define a recursive function to generate all possible permutations of the instructions
        def generate_permutations(instructions, start_index, end_index, results):
            if start_index == end_index:
                results.append(list(instructions))
            else:
                for i in range(start_index, end_index + 1):
                    instructions[start_index], instructions[i] = instructions[i], instructions[start_index]
                    generate_permutations(instructions, start_index + 1, end_index, results)
                    instructions[start_index], instructions[i] = instructions[i], instructions[start_index]

        # Generate all possible permutations of the instructions
        results = []
        generate_permutations(instructions, 0, len(instructions) - 1, results)

        # Sort the permutations lexicographically
        sorted_results = sorted(results)

        # Select the kth permutation as the solution
        solution = sorted_results[k - 1]

        # Print the solution
        print("Your instructions to find the treasure are:")
        for i in solution:
            print("Go to the", i)

        # Add a little modification to the game
        # Generate a random set of clues to help the player find the treasure
        clues = random.sample(list(maze.keys()), 3)
        print("\nHere are some clues to help you:")
        for clue in clues:
            if clue in solution:
                print(f"- The {clue} is on your path.")
            else:
                print(f"- The {clue} is not on your path. Be careful!")

        # Ask the player if they found the clues
        found_clues = input("\nDid you find the clues? (y/n): ")

        # If the player didn't find the clues, suggest they replay the level
        if found_clues.lower() != "y":
            print("\nSorry, you didn't find the clues. Please replay the level to find them.")
            lvl3pts -= 50
            print("You earned " + str(lvl3pts) + " points in this level.")
            AlgorithmicAdventure.totalPoints += lvl3pts
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            y = input("Do you wish to try again? (Y/N): ")
            y = y.upper()
            if y == "Y":
                AlgorithmicAdventure.totalPoints -= lvl3pts
                AlgorithmicAdventure.Level3()
            elif y == "N":
                print("Hope you try the game at a later time!")
                exit(0)
            else:
                print("Invalid input.")

        # If the player found the clues, allow them to proceed to the next level
        else:
            print("\nGood job. You found the clues and cleared Level 3.")
            print("You earned " + str(lvl3pts) + " points in this level.")
            AlgorithmicAdventure.totalPoints += lvl3pts
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            print("Would you like to continue to Level 4?")
            while (True):
                uNext = input("Enter Y/N: ")
                uNext = uNext.upper()
                if uNext == "Y":
                    print("You proceed to Level 4. You earned the Up-And-Coming Hero title.")
                    AlgorithmicAdventure.Level4()
                elif uNext == "N":
                    print("Hope you try the game at a later time!")
                    exit(0)
                else:
                    print("Invalid input.")
        
    def Level4():
        
        system("cls")
        
        lvl4pts = 50
        
        nums = [random.randint(0,30),random.randint(0,30),random.randint(0,30),random.randint(0,30)]
        
        print("{:>60}".format("******************************************"))
        print("{:>57}".format("Level 4: The Number of Good Subsets"))
        print("{:>60}".format("******************************************"))
        
        print(f"\nYou encounter a locked door which leads to the next level.")
        print(f"Given the following array: {nums}, enter the number of good subsets to unlock the door.")
        print(f"Hint: A good subset is a subset whose product can be represented as a product of one or more distinct prime numbers.")
        
        c = Counter(nums)
        
        primeNumList = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
        
        if (len(nums) == 1):
            if nums[0] in primeNumList:
                return 1
            else:
                return 0
            
        badElts = [1,4,9,25]
    
        s = [1] + [0] * (2**10)
    
        modulus = pow(10,9)+7
    
        for elt in c:
            if elt == badElts[3]:
                continue
            if elt == badElts[0]:
                continue
            if elt % badElts[1] == 0:
                continue
            if elt % badElts[2] == 0:
                continue
        
        ps = sum((2**x) for x, y in enumerate(primeNumList) if elt % y == 0)
                
        for pps in range(0,2**10,1):
            if ps & pps:
                continue
            s[ps | pps] = (s[pps] * c[elt] + s[ps | pps]) % modulus
            
        result = (sum(s) - 1) * ((2**c[1]) % modulus) % modulus
        
        tries = 0
        user_ans = 0
        
        for i in range(3):
            x = input("Enter the number of good subsets: ")
            
            try:
                user_ans = int(x)
            except ValueError:
                print("Invalid input.")
            
            if result == user_ans:
                print("Your answer is correct.")
                print("You earned " + str(lvl4pts) + " points in this level.")
                AlgorithmicAdventure.totalPoints += lvl4pts
                print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                print("Would you like to continue to Level 5?")
                while (True):
                    uNext = input("Enter Y/N: ")
                    uNext = uNext.upper()
                    if uNext == "Y":
                        print("You proceed through the door, which leads you to Level 5. You earned the Trusty Hero title.")
                        AlgorithmicAdventure.Level5()
                    elif uNext == "N":
                        print("Hope you try the game at a later time!")
                        exit(0)
                    else:
                        print("Invalid input.")
            else:
                tries += 1
                if tries == 3:
                    print("You fail to unlock the door and activate some traps.")
                    print("Game Over")
                    print("You earned " + str(lvl4pts) + " points in this level.")
                    AlgorithmicAdventure.totalPoints += lvl4pts
                    print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                    y = input("Do you wish to try again? (Y/N): ")
                    y = y.upper()
                    if y == "Y":
                        AlgorithmicAdventure.totalPoints -= lvl4pts
                        AlgorithmicAdventure.Level4()
                    elif y == "N":
                        print("Hope you try the game at a later time!")
                        exit(0)
                    else:
                        print("Invalid input.")
                lvl4pts -= 10
                print("Your answer is incorrect. Try again.")
            
        
    def Level5():
        system("cls")
        print("{:>70}".format("**************************************"))
        print("{:>70}".format("Level 5: Distribute Repeating Integers"))
        print("{:>70}".format("**************************************"))
        global nTry
        num1 = [1, 2, 3, 4]
        cQuant1 = [2]
        num2 = [1, 2, 2, 3, 3, 4]
        cQuant2 = [2]
        num3 = [1, 1, 2, 2]
        cQuant3 = [2, 2]
        global cRes
        global uResp

        nTry = 1

        # call the function with num 1 and cQuant1
        AlgorithmicAdventure.l5Messaging(nTry)
        AlgorithmicAdventure.l5Exe(num1, cQuant1)

        if nTry == 2:
            AlgorithmicAdventure.l5Exe(num2, cQuant3)
        if (nTry > 2):
            print("You have exceeded number of tries to solve the puzzle. Please try this game at a later time")
            exit(0)

    def Level6():
        
        system("cls")
        
        words = [["home", "ome"], ["dog", "god"], ["cat", "act"], ["car", "arc"], ["listen", "silent"]]
        word1, word2 = random.choice(words)
        
        print("{:>60}".format("****************************"))
        print("{:>57}".format("Level 6: Edit Distance"))
        print("{:>60}".format("****************************"))
        print("You come across a puzzle that consists of two words: ")
        print("word1: " + word1)
        print("word2: " + word2)
        
        success = False
        
        m, n = len(word1), len(word2)
        # initialize the dp table
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m + 1):
            dp[i][0] = i
        for j in range(n + 1):
            dp[0][j] = j
        # fill the dp table
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1
        # ask the user for their guess and give them 5 tries
        reward = 50
        for i in range(5):
            c="Guess the minimum number of operations required to transform word: {} to {}:".format(word1,word2)
            guess = input(c)
            if guess.isdigit() and int(guess) == dp[m][n]:
                AlgorithmicAdventure.totalPoints+=reward
                print("Congratulations, you got it right!")
                print(f"You earned {reward} points in this level.")
                print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
                success = True
                break
            elif i < 5:
                print("Sorry, that's incorrect. Please try again.")
                reward -= 10
                
        if success == True:
            print("Would you like to continue to Level 7?")
            while (True):
                uNext = input("Enter Y/N: ")
                uNext = uNext.upper()
                if uNext == "Y":
                    print("You proceed to the next level. You earned the Infamous Hero title.")
                    AlgorithmicAdventure.Level7()
                elif uNext == "N":
                    print("Hope you try the game at a later time!")
                    exit(0)
                else:
                    print("Invalid input.")
        elif success == False:
            # display the correct answer after 5 incorrect guesses
            print(f"The correct answer is {dp[m][n]}.")
                    
            print("You failed to get the correct answer. The level will now reset.")
            print("You earned " + str(reward) + " points in this level.")
            AlgorithmicAdventure.totalPoints += reward
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            y = input("Do you wish to try again? (Y/N): ")
            y = y.upper()
            if y == "Y":
                AlgorithmicAdventure.totalPoints -= reward
                AlgorithmicAdventure.Level6()
            elif y == "N":
                print("Hope you try the game at a later time!")
                exit(0)
            else:
                print("Invalid input.")

        
    # Define the function to generate a list of random boxes
    def generate_boxes(num_boxes):
        # Define the possible colors
        colors = ['red', 'blue', 'green', 'yellow']
        
        # Generate a list of random boxes
        return [random.choice(colors) for _ in range(num_boxes)]

    # Define the function to sort the boxes
    def sort_boxes(boxes):
        # Define the correct order of colors
        order = ['blue', 'green', 'red', 'yellow']
        
        # Sort the boxes based on the order of colors
        return sorted(boxes, key=lambda x: order.index(x))    
    
    def Level7():
        
        system("cls")
        # Define the game parameters
        NUM_ROUNDS = 4
        MIN_BOXES = 2
        MAX_BOXES = 3
        POINTS_PER_ROUND = 10

        # Start the game
        print("{:>60}".format("****************************"))
        print("{:>57}".format("Level 7: Remove Boxes"))
        print("{:>60}".format("****************************"))
        print("Welcome to the Box Sorting Challenge!")
        print("You will be presented with a series of colored boxes and must sort them based on their colors.")
        print(f"You will play {NUM_ROUNDS} rounds, with {MIN_BOXES} to {MAX_BOXES} boxes per round.")
        print(f"For each correct box sorted, you will earn {POINTS_PER_ROUND} points. For each incorrect box sorted, you will lose {POINTS_PER_ROUND} points.")
        print()

        total_points = 0
        for round_num in range(1, NUM_ROUNDS+1):
            # Generate a list of random boxes for this round
            num_boxes = random.randint(MIN_BOXES, MAX_BOXES)
            boxes = AlgorithmicAdventure.generate_boxes(num_boxes)

            # Sort the boxes based on their colors
            sorted_boxes = AlgorithmicAdventure.sort_boxes(boxes)

            # Prompt the user to sort the boxes
            print(f"Round {round_num}: {boxes}")
            user_answer = input("Sort the boxes by color (separated by commas): ").split(',')

            # Check if the user's answer is correct
            if user_answer == sorted_boxes:
                print("Correct!")
                total_points += POINTS_PER_ROUND
            else:
                print("Incorrect.")
                total_points -= POINTS_PER_ROUND

            print(f"Your score is {total_points}.")
            print()
        
        if total_points <= 0:
            print("Game over. Thanks for playing!")
            print("You earned " + str(total_points) + " points in this level.")
            AlgorithmicAdventure.totalPoints += total_points
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            y = input("Do you wish to try again? (Y/N): ")
            y = y.upper()
            if y == "Y":
                AlgorithmicAdventure.totalPoints -= total_points
                AlgorithmicAdventure.Level7()
            elif y == "N":
                print("Hope you try the game at a later time!")
                exit(0)
            else:
                print("Invalid input.")
        elif total_points > 0:
            print("Good job. You cleared Level 7.")
            print("You earned " + str(total_points) + " points in this level.")
            AlgorithmicAdventure.totalPoints += total_points
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            print("Would you like to continue to Level 8?")
            while (True):
                uNext = input("Enter Y/N: ")
                uNext = uNext.upper()
                if uNext == "Y":
                    print("You proceed to Level 8. You earned the Mystical Hero title.")
                    AlgorithmicAdventure.Level8()
                elif uNext == "N":
                    print("Hope you try the game at a later time!")
                    exit(0)
                else:
                    print("Invalid input.")
        
    def generate_digits(num_digits):
        """Generate a list of num_digits random digits between 0 and 9"""
        return [random.randint(0, 9) for _ in range(num_digits)]

    def calculate_largest_multiple_of_3(digits):
        """Calculate the largest multiple of 3 possible based on the sum of digits"""
        digit_sum = sum(digits)
        if digit_sum % 3 == 0:
            return digit_sum
        else:
            return digit_sum - (digit_sum % 3)    
    
    def Level8():
        
        system("cls")
        # Set up game parameters
        NUM_ROUNDS = 4
        MIN_DIGITS = 3
        MAX_DIGITS = 6
        POINTS_PER_ROUND = 10

        # Start the game
        print("{:>60}".format("***************************************"))
        print("{:>57}".format("Level 8: Largest Multiple of Three"))
        print("{:>60}".format("***************************************"))
        print("Welcome to Digit Sum Challenge Game!")
        print("You will be presented with a series of digits and must identify the largest multiple of three possible based on the sum of the digits.")
        print(f"You will play {NUM_ROUNDS} rounds, with {MIN_DIGITS} to {MAX_DIGITS} digits per round.")
        print(f"For each correct answer, you will earn {POINTS_PER_ROUND} points. For each incorrect answer, you will lose {POINTS_PER_ROUND} points.")
        print()

        total_points = 0
        for round_num in range(1, NUM_ROUNDS+1):
            # Generate a random list of digits for this round
            num_digits = random.randint(MIN_DIGITS, MAX_DIGITS)
            digits = AlgorithmicAdventure.generate_digits(num_digits)

            # Calculate the largest multiple of 3 based on the digits
            largest_multiple_of_3 = AlgorithmicAdventure.calculate_largest_multiple_of_3(digits)

            # Prompt the user to enter their answer
            print(f"Round {round_num}: {digits}")
            user_answer = int(input("Enter the largest multiple of 3 possible: "))

            # Check if the user's answer is correct
            if user_answer == largest_multiple_of_3:
                print("Correct!")
                total_points += POINTS_PER_ROUND
            else:
                print(f"Incorrect. The correct answer is {largest_multiple_of_3}.")
                total_points -= POINTS_PER_ROUND

            print(f"Your score is {total_points}.")
            print()
            
            
        if total_points <= 0:
            print("Game over. Thanks for playing!")
            print("You earned " + str(total_points) + " points in this level.")
            AlgorithmicAdventure.totalPoints += total_points
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            y = input("Do you wish to try again? (Y/N): ")
            y = y.upper()
            if y == "Y":
                AlgorithmicAdventure.totalPoints -= total_points
                AlgorithmicAdventure.Level8()
            elif y == "N":
                print("Hope you try the game at a later time!")
                exit(0)
            else:
                print("Invalid input.")
        elif total_points > 0:
            print("Good job. You cleared Level 8 and unlocked the treasure room.")
            print("You earned " + str(total_points) + " points in this level.")
            AlgorithmicAdventure.totalPoints += total_points
            print("Total points earned so far: " + str(AlgorithmicAdventure.totalPoints))
            print("Would you like to continue to the treasure room?")
            while (True):
                uNext = input("Enter Y/N: ")
                uNext = uNext.upper()
                if uNext == "Y":
                    print("You proceed to the treasure room. You earned the Legendary Hero title.")
                    AlgorithmicAdventure.TreasureRoom()
                elif uNext == "N":
                    print("Hope you try the game at a later time!")
                    exit(0)
                else:
                    print("Invalid input.")
        
    def TreasureRoom():
        
        system("cls")
        print("Congratulations. You reached the treasure room. You stand awestruck at the pile of treasure that lies before you.")
        print("You proceed to collect as much treasure as you can carry and leave the castle.")
        print("You return to your hometown with the treasure and you live happily ever after.")
        print("Your heroic journey has come to an end.")
        print("Would you like to restart the game?")
        while (True):
            uNext = input("Enter Y/N: ")
            uNext = uNext.upper()
            if uNext == "Y":
                AlgorithmicAdventure.MainMenu()
            elif uNext == "N":
                print("Thanks for playing!")
                exit(0)
            else:
                print("Invalid input.")
    
AlgorithmicAdventure.MainMenu()
